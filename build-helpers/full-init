#!/usr/bin/env doomscript
;; -*- lexical-binding: t; -*-

;; Copyright 2024 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

;; Simple recursive walk of packages.el to extract (modulep! +flag)
;;
;; Does not cover (modulep! :cat mod +flag). That is: assumes each flag is
;; referenced at least once by shortened form in the module itself.
;;
;; Ignores negated flags (assumes they are used positively at least once).
;;
;; No attempt at efficiency, but package.el files are small...

(defun walk-package-exp (l)
  (cond ((not (consp l)) nil)
        ((and (> (length l) 1)
              (eq 'modulep! (car l))
              (not (keywordp (cadr l))))
         (seq-filter (lambda (flag) (string-prefix-p "+" (symbol-name flag)))
                     (cdr l)))
        (t (mapcan #'walk-package-exp l))))

(defcli! full-init
    ((output-directory ("-o" dir) "Directory to write init.el into.")
     (&flag flags? ("--flags"))
     (&multi skip ("-s" form) "Module to skip, as `(:cat name)'." ))
  "Write init.el with all modules."
  (with-temp-buffer
    (insert ";;; init.el -*- lexical-binding: t; -*-

;;; Dynamically generated by nix-doom-emacs-unstraightened.

(doom!
")
    (doom-modules-initialize)
    ;; Doom gives us (FLAG . VALUE) cons cells. Drop the flag (always -s).
    (let ((skip (mapcar #'cdr skip)))
      (dolist (kp (doom-module-list 'all))
        (pcase-let ((`(,cat . ,name) kp))
          (when (and name (not (member (list cat name) skip)))
            (if-let* ((flags?)
                      (packages-path (doom-module-locate-path
                                      kp doom-module-packages-file))
                      (tree (with-temp-buffer
                              (insert "(\n")
                              (insert-file-contents packages-path)
                              (goto-char (point-max))
                              (insert ")\n")
                              (goto-char (point-min))
                              (read (current-buffer))))
                      (flags (seq-uniq (walk-package-exp tree))))
                (insert (format " %s %s\n" cat (cons name flags)))
              (insert (format " %s %s\n" cat name))))))
      (insert ")\n")
      (when skip
        (insert (format "\n;; ignored: %s\n" skip))))
    (write-region nil nil (expand-file-name "init.el" output-directory))))

(run! "full-init" (cdr (member "--" argv)))
